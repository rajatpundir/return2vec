       
    def compute_probabilities(self):
        x = 1 / self.distances
        np.fill_diagonal(x, 0)
        self.probabilities = x / x.sum(axis=1, keepdims=True)
        print('Success: Computed Probabilities.')
        
    def draw_distribution(self, num):
        probs = []
        vals = []
        for key in self.unused_dictionary:
            if key == 'UNK':
                continue
            vals.append(float(key))
        vals = sorted(vals)
        keys = []
        for v in vals:
            keys.append(self.unused_dictionary[str(v)])
        for k in keys:
            probs.append(self.probabilities[self.unused_dictionary[str(float(num))]][k])
        vals_strings = []
        for v in vals:
            vals_strings.append(str(v))
        p = figure(x_range=vals_strings, plot_height=500, plot_width=500, title="Return : " + str(float(num)))
        p.vbar(x=vals_strings, top=probs, width=0.9)
        p.xgrid.grid_line_color = None
        p.y_range.start = 0
        mean = np.array(vals).mean()
        std = np.array(vals).std()
        print('Mean :', mean)
        print('Std  :', abs(std))
        p.vbar(x=[str(round(mean, 2))], top=[np.array(probs).max()], width=1.8, color='black')
        p.vbar(x=[str(round(mean + abs(mean - std), 2))], top=[np.array(probs).max()], width=1.8, color='red')
        p.vbar(x=[str(round(mean - abs(mean - std), 2))], top=[np.array(probs).max()], width=1.8, color='red')
        show(p)
        
    def compute_expected_val_probs(self, num, required_prob = 0.1):
        if str(float(num)) not in self.unused_dictionary:
            return {}
        vals = list(self.unused_dictionary.keys())[1:]
        probs = self.probabilities[self.unused_dictionary[str(float(num))]][1:]
        val_to_prob = {}
        for i in range(len(vals)):
            val_to_prob[vals[i]] = probs[i]
        expected_val_probs = {}
        p = 0
        for k, v in sorted(val_to_prob.items(), key=lambda x: x[1], reverse=True):
            if p >= required_prob:
                break
            expected_val_probs[float(k)] = v
            p += v
        return expected_val_probs

    def breadth_search(self, n, change_percent=0.2, required_prob=0.1, top_samples=0):
        l = [k for k in self.unused_dictionary][1:]
        x = round((1 - change_percent) * n, 2)
        y = []
        while True:
            if x <= round((1 + change_percent) * n, 2):
                if str(x) in l:
                    y.append(x)
            else:
                break
            x = round(x + 0.01, 2)
        z = []
        for v in y:
            if str(float(v)) in self.unused_dictionary:
                z.append(v)
        val_probs = {}
        breadth_val_probs = {}
        if top_samples == 0:
            for num in z:
                expected_val_probs = self.compute_expected_val_probs(num, required_prob)
                for key in expected_val_probs:
                    if key in val_probs:
                        val_probs[key] += expected_val_probs[key]
                    else:
                        val_probs[key] = expected_val_probs[key]
#             for k, v in sorted(val_probs.items(), key=lambda x: x[1], reverse=True):
            for k, v in sorted(val_probs.items(), key=lambda x: x[1]):
                breadth_val_probs[k] = v / len(z)
        else:
            for num in z:
                expected_val_probs = self.compute_expected_val_probs(num, 1)
                for key in expected_val_probs:
                    if key in val_probs:
                        val_probs[key] += expected_val_probs[key]
                    else:
                        val_probs[key] = expected_val_probs[key]
            total = 0
            for key in val_probs:
                total += val_probs[key]
            normalized_val_probs = {}
            for key in val_probs:
                normalized_val_probs[key] = val_probs[key] / total
            count = 0
#             for k, v in sorted(normalized_val_probs.items(), key=lambda x: x[1], reverse=True):
            for k, v in sorted(normalized_val_probs.items(), key=lambda x: x[1]):
                breadth_val_probs[k] = v
                count += 1
                if count >= top_samples:
                    break
        return breadth_val_probs

    def depth_search(self, num_list, change_percent=0.2, required_prob=0.1):
        current_val_probs = {}
        for num in num_list:
            breadth_val_probs = self.breadth_search(num, change_percent, 1, 0)
            for key in breadth_val_probs:
                if key in current_val_probs:
                    current_val_probs[key] *= breadth_val_probs[key]
                else:
                    current_val_probs[key] = breadth_val_probs[key]
            total = 0
            for key in current_val_probs:
                total += current_val_probs[key]
            normalized_val_probs = {}
            for key in current_val_probs:
                normalized_val_probs[key] = current_val_probs[key] / total
            current_val_probs = normalized_val_probs
        depth_val_probs = {}
        p = 0
        for k, v in sorted(current_val_probs.items(), key=lambda x: x[1], reverse=True):
            if p >= required_prob:
                break
            depth_val_probs[float(k)] = v
            p += v
        return depth_val_probs
